#+title: Glossary
#+HUGO_BASE_DIR: ..
#+hugo_section: pages
#+HUGO_LEVEL_OFFSET: 1
# NOTE: Run citar-export-local-bib-file to generate local-bib.bib.
# +BIBLIOGRAPHY: /home/philae/git/eth/references/references.bib
#+BIBLIOGRAPHY: ../posts/pairwise-alignment/local-bib.bib
#+cite_export: csl ../chicago-author-date.csl
#+OPTIONS: ^:{}
#+hugo_auto_set_lastmod: nil
#+date: <2022-04-14 Thu>

This is a work-in-progress list of terms and their definitions, and who introduced the name.
More of a place to store random remarks than a complete reference for now.

- diagonal transition :: name introduced by [cite/text:@navarro01]

- approximate ::
  1. /approximate algorithm/: an algorithms that does not always give the
     /correct/ answer.
  2. /$k$-approximate string matching/: variant semi-global alignment where we
     find all matches of a pattern in a reference with at most $k$ mistakes.

     Also /approximate string matching/: alternative name for global pairwise alignment.

- dynamic heuristic :: A heuristic that changes as the A* progresses. Not:
  /online heuristic/.

- heuristic ::
  1. /A* heuristic/: A function $h$ that provides a lower bound (when
     /admissible) on the distance from the current state to the end.
  2. /heuristic method/: An approximate method, that approximates the exact answer.

- exact ::
  1. An /exact algorithm/ is guaranteed to give the correct (e.g. minimal) answer.
  2. An /exact match/ between strings, without errors.

- optimal ::
  1. /exact/, guaranteed correct.
  2. /optimal performance/complexity/: as fast as (theoretically) possible

- complexity ::
  1. /(asymptotic) runtime complexity/: how the runtime of an algorithm scales
     with input size, as in $O(n^2)$.
  2. /not simple, difficult/: an more informal statement.

- vertex / node / state ::
  All are used interchangeably, but have slightly different meanings:
  - /vertex/: The objects of a graph between which the edges go. The most
    'mathematical'/precise of the three.
  - /node/: Same as /vertex/, but can additionally mean a /node in a
    data structure/ or a /node in a tree/. More general and hence slightly less precise when
    /vertex/ could also be used.
  - /state/: Usually in relation to a /state machine/.
  In A*PA, we use /state/ exclusively for a vertex of the /edit-graph/, and
  use /node/ instead of /vertex/, mostly because it's shorter.


* TODO

- Terms related to reads:
  - ONT
  - chemistry
  - base caller
  -
- Terms related to Conda:
  - conda
  - anaconda
  - miniconda
  - forge
  - mambaforge?
  - miniforge?
- in silico
- de novo
- seed / match

* References
#+print_bibliography:
