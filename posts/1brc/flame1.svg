<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="261.00"> </text><svg id="frames" x="10" width="1180" total_samples="104418"><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (310 samples, 0.30%)</title><rect x="0.0000%" y="197" width="0.2969%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="310"/><text x="0.2500%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (170 samples, 0.16%)</title><rect x="0.2969%" y="181" width="0.1628%" height="15" fill="rgb(217,0,24)" fg:x="310" fg:w="170"/><text x="0.5469%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (491 samples, 0.47%)</title><rect x="0.4635%" y="181" width="0.4702%" height="15" fill="rgb(221,193,54)" fg:x="484" fg:w="491"/><text x="0.7135%" y="191.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,636 samples, 1.57%)</title><rect x="0.9337%" y="181" width="1.5668%" height="15" fill="rgb(248,212,6)" fg:x="975" fg:w="1636"/><text x="1.1837%" y="191.50"></text></g><g><title>[[stack]] (2,430 samples, 2.33%)</title><rect x="0.2969%" y="197" width="2.3272%" height="15" fill="rgb(208,68,35)" fg:x="310" fg:w="2430"/><text x="0.5469%" y="207.50">[..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (129 samples, 0.12%)</title><rect x="2.5005%" y="181" width="0.1235%" height="15" fill="rgb(232,128,0)" fg:x="2611" fg:w="129"/><text x="2.7505%" y="191.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (2,213 samples, 2.12%)</title><rect x="2.6241%" y="181" width="2.1194%" height="15" fill="rgb(207,160,47)" fg:x="2740" fg:w="2213"/><text x="2.8741%" y="191.50">&lt;..</text></g><g><title>[libc.so.6] (17 samples, 0.02%)</title><rect x="4.7434%" y="181" width="0.0163%" height="15" fill="rgb(228,23,34)" fg:x="4953" fg:w="17"/><text x="4.9934%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (25 samples, 0.02%)</title><rect x="4.7597%" y="181" width="0.0239%" height="15" fill="rgb(218,30,26)" fg:x="4970" fg:w="25"/><text x="5.0097%" y="191.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (1,146 samples, 1.10%)</title><rect x="4.7837%" y="181" width="1.0975%" height="15" fill="rgb(220,122,19)" fg:x="4995" fg:w="1146"/><text x="5.0337%" y="191.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (591 samples, 0.57%)</title><rect x="5.8812%" y="181" width="0.5660%" height="15" fill="rgb(250,228,42)" fg:x="6141" fg:w="591"/><text x="6.1312%" y="191.50"></text></g><g><title>[anon] (4,684 samples, 4.49%)</title><rect x="2.6241%" y="197" width="4.4858%" height="15" fill="rgb(240,193,28)" fg:x="2740" fg:w="4684"/><text x="2.8741%" y="207.50">[anon]</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (692 samples, 0.66%)</title><rect x="6.4472%" y="181" width="0.6627%" height="15" fill="rgb(216,20,37)" fg:x="6732" fg:w="692"/><text x="6.6972%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (215 samples, 0.21%)</title><rect x="7.1156%" y="181" width="0.2059%" height="15" fill="rgb(206,188,39)" fg:x="7430" fg:w="215"/><text x="7.3656%" y="191.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (765 samples, 0.73%)</title><rect x="7.3215%" y="181" width="0.7326%" height="15" fill="rgb(217,207,13)" fg:x="7645" fg:w="765"/><text x="7.5715%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (163 samples, 0.16%)</title><rect x="8.0542%" y="181" width="0.1561%" height="15" fill="rgb(231,73,38)" fg:x="8410" fg:w="163"/><text x="8.3042%" y="191.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (17 samples, 0.02%)</title><rect x="8.2103%" y="181" width="0.0163%" height="15" fill="rgb(225,20,46)" fg:x="8573" fg:w="17"/><text x="8.4603%" y="191.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (633 samples, 0.61%)</title><rect x="8.2266%" y="181" width="0.6062%" height="15" fill="rgb(210,31,41)" fg:x="8590" fg:w="633"/><text x="8.4766%" y="191.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (554 samples, 0.53%)</title><rect x="8.8328%" y="181" width="0.5306%" height="15" fill="rgb(221,200,47)" fg:x="9223" fg:w="554"/><text x="9.0828%" y="191.50"></text></g><g><title>[unknown] (3,180 samples, 3.05%)</title><rect x="7.1156%" y="197" width="3.0455%" height="15" fill="rgb(226,26,5)" fg:x="7430" fg:w="3180"/><text x="7.3656%" y="207.50">[un..</text></g><g><title>one_billion_row_challenge::main (833 samples, 0.80%)</title><rect x="9.3633%" y="181" width="0.7978%" height="15" fill="rgb(249,33,26)" fg:x="9777" fg:w="833"/><text x="9.6133%" y="191.50"></text></g><g><title>_rtld_global (103 samples, 0.10%)</title><rect x="10.1611%" y="197" width="0.0986%" height="15" fill="rgb(235,183,28)" fg:x="10610" fg:w="103"/><text x="10.4111%" y="207.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (103 samples, 0.10%)</title><rect x="10.1611%" y="181" width="0.0986%" height="15" fill="rgb(221,5,38)" fg:x="10610" fg:w="103"/><text x="10.4111%" y="191.50"></text></g><g><title>[libc.so.6] (2,133 samples, 2.04%)</title><rect x="33.2835%" y="53" width="2.0428%" height="15" fill="rgb(247,18,42)" fg:x="34754" fg:w="2133"/><text x="33.5335%" y="63.50">[..</text></g><g><title>core::hash::BuildHasher::hash_one (55 samples, 0.05%)</title><rect x="35.3263%" y="53" width="0.0527%" height="15" fill="rgb(241,131,45)" fg:x="36887" fg:w="55"/><text x="35.5763%" y="63.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (34,263 samples, 32.81%)</title><rect x="15.7253%" y="69" width="32.8133%" height="15" fill="rgb(249,31,29)" fg:x="16420" fg:w="34263"/><text x="15.9753%" y="79.50">&lt;core::str::pattern::CharSearcher as core::str::patte..</text></g><g><title>core::slice::memchr::memchr_aligned (13,741 samples, 13.16%)</title><rect x="35.3790%" y="53" width="13.1596%" height="15" fill="rgb(225,111,53)" fg:x="36942" fg:w="13741"/><text x="35.6290%" y="63.50">core::slice::memchr:..</text></g><g><title>core::str::converts::from_utf8 (2,083 samples, 1.99%)</title><rect x="48.5386%" y="37" width="1.9949%" height="15" fill="rgb(238,160,17)" fg:x="50683" fg:w="2083"/><text x="48.7886%" y="47.50">c..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_string (2,088 samples, 2.00%)</title><rect x="48.5386%" y="69" width="1.9997%" height="15" fill="rgb(214,148,48)" fg:x="50683" fg:w="2088"/><text x="48.7886%" y="79.50">&lt;..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_to_string (2,088 samples, 2.00%)</title><rect x="48.5386%" y="53" width="1.9997%" height="15" fill="rgb(232,36,49)" fg:x="50683" fg:w="2088"/><text x="48.7886%" y="63.50">&lt;..</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (14,919 samples, 14.29%)</title><rect x="50.5382%" y="69" width="14.2878%" height="15" fill="rgb(209,103,24)" fg:x="52771" fg:w="14919"/><text x="50.7882%" y="79.50">core::num::dec2flt::&lt;i..</text></g><g><title>core::num::dec2flt::parse::parse_number (7,327 samples, 7.02%)</title><rect x="57.8090%" y="53" width="7.0170%" height="15" fill="rgb(229,88,8)" fg:x="60363" fg:w="7327"/><text x="58.0590%" y="63.50">core::num..</text></g><g><title>[libc.so.6] (5,906 samples, 5.66%)</title><rect x="74.4153%" y="53" width="5.6561%" height="15" fill="rgb(213,181,19)" fg:x="77703" fg:w="5906"/><text x="74.6653%" y="63.50">[libc.s..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (36,726 samples, 35.17%)</title><rect x="64.8260%" y="69" width="35.1721%" height="15" fill="rgb(254,191,54)" fg:x="67690" fg:w="36726"/><text x="65.0760%" y="79.50">hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V..</text></g><g><title>core::hash::BuildHasher::hash_one (20,807 samples, 19.93%)</title><rect x="80.0714%" y="53" width="19.9266%" height="15" fill="rgb(241,83,37)" fg:x="83609" fg:w="20807"/><text x="80.3214%" y="63.50">core::hash::BuildHasher::hash_o..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7,376 samples, 7.06%)</title><rect x="92.9342%" y="37" width="7.0639%" height="15" fill="rgb(233,36,39)" fg:x="97040" fg:w="7376"/><text x="93.1842%" y="47.50">&lt;core::ha..</text></g><g><title>_start (93,704 samples, 89.74%)</title><rect x="10.2597%" y="197" width="89.7393%" height="15" fill="rgb(226,3,54)" fg:x="10713" fg:w="93704"/><text x="10.5097%" y="207.50">_start</text></g><g><title>__libc_start_main (93,704 samples, 89.74%)</title><rect x="10.2597%" y="181" width="89.7393%" height="15" fill="rgb(245,192,40)" fg:x="10713" fg:w="93704"/><text x="10.5097%" y="191.50">__libc_start_main</text></g><g><title>[libc.so.6] (93,704 samples, 89.74%)</title><rect x="10.2597%" y="165" width="89.7393%" height="15" fill="rgb(238,167,29)" fg:x="10713" fg:w="93704"/><text x="10.5097%" y="175.50">[libc.so.6]</text></g><g><title>std::rt::lang_start (93,704 samples, 89.74%)</title><rect x="10.2597%" y="149" width="89.7393%" height="15" fill="rgb(232,182,51)" fg:x="10713" fg:w="93704"/><text x="10.5097%" y="159.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (93,704 samples, 89.74%)</title><rect x="10.2597%" y="133" width="89.7393%" height="15" fill="rgb(231,60,39)" fg:x="10713" fg:w="93704"/><text x="10.5097%" y="143.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (93,704 samples, 89.74%)</title><rect x="10.2597%" y="117" width="89.7393%" height="15" fill="rgb(208,69,12)" fg:x="10713" fg:w="93704"/><text x="10.5097%" y="127.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (93,704 samples, 89.74%)</title><rect x="10.2597%" y="101" width="89.7393%" height="15" fill="rgb(235,93,37)" fg:x="10713" fg:w="93704"/><text x="10.5097%" y="111.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>one_billion_row_challenge::main (93,704 samples, 89.74%)</title><rect x="10.2597%" y="85" width="89.7393%" height="15" fill="rgb(213,116,39)" fg:x="10713" fg:w="93704"/><text x="10.5097%" y="95.50">one_billion_row_challenge::main</text></g><g><title>all (104,418 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(222,207,29)" fg:x="0" fg:w="104418"/><text x="0.2500%" y="239.50"></text></g><g><title>one-billion-row (104,418 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(206,96,30)" fg:x="0" fg:w="104418"/><text x="0.2500%" y="223.50">one-billion-row</text></g></svg></svg>