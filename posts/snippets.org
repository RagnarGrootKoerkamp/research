#+title: Code snippets for Latex, Rust, and Python
#+filetags: devops note
#+OPTIONS: ^:{} num:
#+hugo_front_matter_key_replace: author>authors
#+toc: headlines 3
#+date: <2025-01-15 Wed>

These are some common libraries and code snippets for various tasks.

* Latex

** Code highlighting: =minted=

#+begin_src LaTeX
\usepackage[newfloat=true]{minted}
\newmintedfile{rust}{
  linenos,
  numbersep=5pt,
  frame=lines,
  baselinestretch=1.05,
  fontsize=\footnotesize,
}

\begin{listing}[t]
  \rustfile{code.rs}%
  \vspace{-1.3em}%
  \caption{Caption}%
  \label{rs:label}%
\end{listing}
#+end_src

* Rust

** =Cargo.toml= workspace
#+begin_src toml
[workspace]
members = [
    "a",
    "b",
]
resolver = "2"

[workspace.dependencies]
serde = "1.0"
#+end_src

** Release profile
#+begin_src toml
[profile.release]
lto = "thin"
incremental = true
debug = true
#+end_src

** List exported functions
#+begin_src sh
cargo modules generate tree  --fns --traits --types --sort-by visibility
#+end_src

** Read human genome using =needletail=
#+begin_src rust
fn read_human_genome() -> PackedSeqVec {
    let mut packed_text = PackedSeqVec::default();
    let Ok(mut reader) = needletail::parse_fastx_file("human-genome.fa") else {
        eprintln!("Did not find human-genome.fa. Add/symlink it to test runtime on it.");
        return PackedSeqVec::default();
    };
    while let Some(r) = reader.next() {
        let r = r.unwrap();
        eprintln!(
            "Read {:?} of len {:?}",
            std::str::from_utf8(r.id()),
            r.raw_seq().len()
        );
        packed_text.push_ascii(r.raw_seq());
    }
    packed_text
}
#+end_src

** Prevent auto-vectorization
=v[i]= prevents auto-vectorization, because the index can panic.
Sometimes we want =v.get_unchecked(i)= instead, but now there are no more panic
and the auto-vectorizer can kick in. Sometimes we want that, but sometimes we
don't. Especially with array indexing this is prone to generate slow =gather=
instructions.
Prevent this using:
#+begin_src rust
unsafe {
    asm!("");
    *v.get_unchecked(b as usize)
}
#+end_src

** Sorting
Use =rdst= ([[https://docs.rs/rdst/latest/rdst/][docs.rs]], [[https://crates.io/crates/rdst][crates.io]]) for fast sorting. Quick benchmark in [[https://github.com/bevyengine/bevy/issues/4291][this bevy
pr]], where it's $20\times$ faster than standard =sort_unstable=.
But note that =rdst= is *multithreaded by default*.

#+begin_src rust
use rdst::RadixSort;
v.radix_sort_unstable();
#+end_src

For non-integer keys, implement the =RadixKey= trait.

There's also =radsort= ([[https://docs.rs/rdst/latest/radsort][docs.rs]], [[https://crates.io/crates/radsort][crates.io]]), which seems a bit faster for
*single threaded* execution.

#+begin_src rust
radsort::sort(&mut v);
radsort::sort_by_key(&mut v, |x| x);
#+end_src

* Python
** Pretty plots
Much nicer/softer colours with
#+begin_src py
plt.style.use('ggplot')?
#+end_src

** Json to pivot table to org table
#+begin_src py
#!/usr/bin/env python3
import pandas as pd
import tabulate

# cols:
# pattern_len, text_len, search, edlib
df = pd.read_json("search.json")

df["search"] = df["search"] / df["text_len"]
df["edlib"] = df["edlib"] / df["text_len"]

p = df.pivot_table(
    index=["pattern_len"],
    columns=["text_len"],
    values=["search", "edlib"],
)

p = p.swaplevel(0, 1, axis=1).sort_index(axis=1)

print(
    tabulate.tabulate(
        p, headers=p.columns, tablefmt="orgtbl", floatfmt=".1f", showindex=True
    )
)
#+end_src

#+begin_src org
#+attr_latex: :booktabs t :placement [t] :align r|rrr
<table>
#+end_src
