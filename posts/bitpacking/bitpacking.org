#+title: [WIP] Bitpacking and string searching
#+hugo_section: notes
#+date:  <2023-08-11>
#+hugo_level_offset: 1
#+hugo_front_matter_key_replace: author>authors
#+options: ^:{}
#+author: Ragnar Groot Koerkamp
#+filetags: review
#+toc: headlines 3

$$
\newcommand{\ceil}[1]{\lceil#1\rceil}
\newcommand{\floor}[1]{\lfloor#1\rfloor}
$$

* Intro
This note summarizes some papers I was reading while investigating this history
of bitpacking methods such as [cite/t:@myers99]. This post was sparked by [cite/t:@bitpal],
which cites many works of Hyyrö. I then discovered that in fact Hyyrö wrote *many*
papers on bitpacking methods. Then while reading these, I also found many
citations to /(approximate) string searching/ algorithms (aka /semi-global
alignment/, aka /(approximate) pattern matching). In particular Baeza-Yates and
Navarro wrote many papers on this topic. Some of those use
bit-packing while others don't. Paper also differ in the distance metric they
use (/mismatches/ (Hamming distance), /matches/ (LCS distance), /differences/ (edit distance), indel distance), and which
approach they use (automata or DP); see the corresponding sections.

For the classic DP bit-packing methods like [cite/t:@myers99], see [[DP methods]].


In the semi-global setting, the convention is that the (short) pattern has
length $m$ (sometimes assumed to be at most the word size $w$), and that the
text has length $n\gg m$.  Semi-global alignment is also called /(approximate)
string matching/. For global alignment, typically $m\sim n$.
Throughout this post, I assume the alphabet size is constant.

Generally, there is a distinction between /practical/ algorithms and
/theoretical/ algorithms. The latter often requiring e.g. a suffix array for
$O(m)$ runtime and hence being slower in practice than a $O(m^2)$ DP-based implementation.

PDFs of some papers listed here are hard to find. I'm happy to share them on request.

* Review papers


- [cite/t:@chang92] [cite/title/b:@chang92] :: Very comprehensive 10 page comparison of theory of many early
  algorithms, and analyses them on random strings. Introduces /diagonal transition/ term.

  TODO: Read this carefully.
  #+caption: Summary of [cite/t:@chang92]. Such a nice table. *Empirical* runtime should be more widespread.
  #+name: chang92
  #+attr_html: :class inset large
  [[file:chang92.png]]
- [cite/t:@baeza-yates92] [cite/title/b:@baeza-yates92] :: 15 page review, but focuses on a slightly different topic.
- [cite/t:@navarro01] [cite/title/b:@navarro01] :: 50 page long review paper. Useful as reference but long to read.
- [cite/t:@navarro02] [cite/title/b:@navarro02] :: 200 page book. I didn't actually read this; it just appeared as citation.
* DP methods

** LCS
*** [cite/t:@allison86]
[cite/title/b:@allison86]
#+caption: Formula of [cite/t:@allison86], as shown by [cite/t:@hyyro04-revisited].
#+name: allison86
[[file:allison86.png]]
- First bit-parallel LCS; well written
- $O(n\ceil{m/w})$ LCS
- Contours
- Bit-profile, called /Alphabet strings/
- Encoding: bits of $row_i$ store horizontal differences (in $\{0,1\}$) within rows.
- $6$ operations per word: $$row_i = x\land ((x-((row_{i-1}\ll 1)|1))) \neq x),$$
  where $x=row_{i-1} \lor b_i$.
- equivalently [cite:@hyyro04-revisited] $$row_i = x\land (\sim(x-((row_{i-1}\ll 1)|1))).$$
- The $-$ and $\ll$ have to be carried through the entire row if it consists
  of multiple words.
- The $|1$ can be absorbed into the carry-through instructions [cite:@hyyro04-revisited].
*** [cite/t:@crochemore01]
[cite/title/b:@crochemore01]
#+caption: [cite/t:@crochemore01] LCS contours
#+name: crochemore01
[[file:crochemore01.png]]
#+caption: Formula of [cite/t:@crochemore01], as shown by [cite/t:@hyyro04-revisited].
#+name: crochemore01-2
[[file:crochemore01-2.png]]
- $O(n\ceil{m/w})$ LCS, like [cite/t:@allison86]
- $4$ instead of $5$ bit-wise operations.
- Contours
- Bit-profile $M[y_j]$ for $j$th char of $y$, and $M'[y_j]$ is its negation.
- Encoding: $\Delta L'_j$ is the negation of the differences in a column, i.e.
  $1$ when two consecutive values are the same.
- $4$ operations, but $2$ table accesses: $$\Delta L'_{j+1} = (\Delta L'_j + (\Delta L'_j \land
  M[y_j])) \lor (\Delta L'_j \land M'[y_j])$$
- In practice computing $M'[y_j] = \sim M[y_j]$ on the fly is faster [cite:@hyyro04-revisited].
- Only the $+$ has to be carried through the entire row if it consists
  of multiple words.
*** [cite/t:@hyyro04-revisited]
:PROPERTIES:
:CUSTOM_ID: hyyro04-revisited
:END:
[cite/title/b:@hyyro04-revisited]
#+caption: Formula of [cite/t:@hyyro04-revisited].
#+name: hyyro04-revisited
[[file:hyyro04-revisited.png]]
#+caption: Tiling the restricted grid of [cite/t:@hyyro04-revisited].
#+name: hyyro04-revisited-tiling
[[file:hyyro04-revisited-tiling.png]]
- Reviews [cite/t:@allison86] and [cite/t:@crochemore01]; very well written.
- $O(n \ceil{m/w})$ LCS, or $O(n\ceil{d/w})$ LCS based on Ukkonen's band doubling for /simple edit
  distance/, i.e. edit distance without substitutions.
- Bit-profile $PM_\lambda$ called /pattern matching bit-vectors/ or /match
  vector/ for $\lambda\in \Sigma$.
- Uses same encoding as [cite/t:@crochemore01], but calls it $V'$.
- One less operation/table lookup less than [cite/t:@crochemore01]:
  \begin{align*}
  U &= V' \& PM_{B_j}\\
  V' &= (V' + U) | (V' - U)
  \end{align*}
- Two carry-through operations between words.
- Implementation is column-wise.
- $11$ operations overhead in the loop to do carry and looping and such.
- Measured runtime differences between implementations are small ($<20\%$) and
  likely depend mostly on how well the compiler optimizes each version.
- [[hyyro04-revisited-tiling]] shows the tiling when given a lower bound on LCS (resp. upper bound on simple edit distance).
*** [cite/t:@hyyro17]
:PROPERTIES:
:CUSTOM_ID: hyyro17
:END:
[cite/title/b:@hyyro17]

- Using an exhaustive search, it is shown that under reasonable assumptions LCS can not be solved using $3$ binary operations.
- A total of $5$ algorithms using $4$ operations are found.
#+caption: The five 4-operation LCS algorithms found by [cite/t:@hyyro17].
#+name: hyyro17
#+attr_html: :class inset
[[file:hyyro17.png]]

** Edit distance
*** [cite/t:@wright94]
:PROPERTIES:
:CUSTOM_ID: wright94
:END:
[cite/title/b:@wright94]

#+caption: DP of [cite/t:@wright94]. I don't get it.
#+name: wright94-dp
[[file:wright94-dp.png]]
#+caption: Modified DP of [cite/t:@wright94]. This one is self referential... I get it even less.
#+name: wright94-dp2
[[file:wright94-dp2.png]]

- $O(nm/w)$ antidiagonal proccessing of the DP-matrix using bitpacking on $\mod 4$ values,
  as in [cite/t:@lipton85] (see [[#lipton85]] below).
- This is implemented without $\min$ operations by using equalities instead.
- Uses $3$ bits per value: one padding for carry to avoid overflowing into the next state.
- I have some confusions about this paper:
  - The DP recurrence ([[wright94-dp]] and [[wright94-dp2]]) seems to be missing $+1$ for the indel terms. What am
    I missing??
  - Algorithm 1 has weird initialization (the for loop over $i$ uses an uninitialized $j$??)
  - (Algorithm 2 makes sense again.)
*** [cite/t:@myers99]
[cite/title/b:@myers99]
#+caption: [cite/t:@myers99] bitpacking algorithm when $m\leq w$.
#+name: myers99
[[file:myers99.png]]
#+caption: [cite/t:@myers99] bitpacking algorithm modification for $m>w$.
#+name: myers99-2
#+attr_html: :class large
[[file:myers99-2.png]]
- $O(n\ceil{m/w})$ Edit distance
- Semi-global alignment. For long patterns, the technique of [cite/t:@wu96] is used for $O(n \ceil{k/w})$ expected time.
- Bit-profile $Peq$
- Bitpacking; $15$ operations assuming horizontal input deltas are $0$ and no
  horizontal output deltas are needed.
- Encoding: ~Ph, Mh, Pv, Mv~ indicators store whether Horizontal/Vertical
  differences are Plus $1$ or Minus $1$. Horizontal deltas are standalone
  bits, and vertical deltas are packed.
- Core observation: there is a /carry/ effect when there are specific long
  runs of ones. This is similar to the carry of addition.
- Core component are $Xv = Eq | (\Delta v_{in} = M)$ and $Xh = Eq | (\Delta h_{in} = M)$
- Between blocks in a column, $h_{out}$ is computed and carried over, instead of
  carrying the addition and two shift operations individually.
#+caption: [cite/t:@myers99] block based algorithm for semi-global alignment.
#+name: myers99-blocks
#+attr_html: :class inset
[[file:myers99-blocks.png]]
*** [cite/t:@hyyro01]
:PROPERTIES:
:CUSTOM_ID: hyyro01
:END:
[cite/title/b:@hyyro01]
#+caption: [cite/t:@hyyro01] bitpacking algorithm when $m\leq w$.
#+name: hyyro01
#+attr_html: :class large
[[file:hyyro01.png]]

- $O(n\ceil{m/w})$ edit distance, or $O(n \ceil{k/w})$ expected time semi-global alignment.
- Equivalent but slightly different bit algorithm than [cite/t:@myers99]; core
  component is $D0 = Xv | Xh$.
- Also shows how to do transpositions [cite:@damerau64].
- Good introduction and exposition.
- Uses $15$ operations ($HP_j\ll 1$ can be reused); same as [cite/t:@myers99]
  $15$ operations.
*** [cite/t:@hyyro02]
:PROPERTIES:
:CUSTOM_ID: hyyro02
:END:
[cite/title/b:@hyyro02]
#+caption: [cite/t:@hyyro02] tiles bit-vectors diagonally.
#+name: hyyro02-diag
[[file:hyyro02-diag.png]]

- $O(\ceil{d/w}m)$ edit distance (optionally with transpositions).
- Merges bitpacking [cite:@myers99] with band doubling [cite:@ukkonen85].
- Introduces diagonal tiling, to better match the statically banded region of [cite:@ukkonen85].
- Diagonal tiling allows the removal of some shifts (i.e. in the last two lines
  of [[hyyro01]], but adds a shift in the opposite direction for $D0$. This
  introduces a ''backwards'' dependency on the vector below-left of it that is
  not present with rectangular tiling.
- The pattern-match vector $PM_j$ is shifted to correct for the unaligned reads.
- Includes a comparison with band doubling and bitpacking algorithms of Ukkonen
  and Myers. Surprisingly, Ukkonen's algorithm that computes values by
  increasing distance (i.e. Dijkstra) is reported as faster that the band
  doubling algorithm, even though Dijkstra is usually considered slow. Sadly no
  code is provided.
*** [cite/t:@hyyro04-increased]
:PROPERTIES:
:CUSTOM_ID: hyyro04-increased
:END:
[cite/title/b:@hyyro04-increased]

- For short patterns, when $m \ll w$, the $O(\ceil{m/w}n)$ runtime wastes many bits of each word.
- They show how to search for $\floor{w/m}$ patterns simultaneously, by packing
  multiple patterns in a single word, for $O(\ceil{r/\floor{w/m}}n)$ total time
  for $r$ patterns.
- They show how to search for a single pattern in $O(n/\floor{w/m})$.
- They apply the cut-off techniques to improve this to
  $O(\ceil{r/\floor{w/k}}n)$ and $O(n/\floor{w/k})$ expected time respectively when at most
  $k$ errors are allowed.
- To avoid interference when adding/shifting, the most significant bit of each
  pattern is set to $0$ beforehand.
- The score at each position is tracked by packing $m$-bit counters into a
  single word, together with adding some offset to make detection of $>k$ values easy.
- To efficiently search a single pattern, the text is split into
  $r:=\floor{w/m}$ chunks. Then, instead of searching multiple patterns against
  the same text, one can search the same pattern against different texts by
  or-ing together the bit-profile of the different text characters.

*** [cite/t:@hyyro05-increased]
:PROPERTIES:
:CUSTOM_ID: hyyro05-increased
:END:
[cite/title/b:@hyyro05-increased]

This is the journal version of the conference paper [cite/t:@hyyro04-increased]
above, and includes a few more results.
- It applies the ideas to multiple exact string matching, searching $r$ patterns in average
  time $O(\ceil{r \log_\sigma w/w}n)$, by searching the first
  $\ceil{\log_\sigma w}$ characters of each pattern in parallel.

- It applies to one-vs-all edit distance, where multiple patterns are packed in
  a word, and similar for LCS.

*** [cite/t:@hyyro02-superseeded]
:PROPERTIES:
:CUSTOM_ID: hyyro02-superseeded
:END:
[cite/title/b:@hyyro02-superseeded]

This is the conference paper of the journal paper [cite/t:@hyyro04] below.
*** [cite/t:@hyyro06]
:PROPERTIES:
:CUSTOM_ID: hyyro06
:END:
[cite/title/b:@hyyro06]

- Solves /local alignment/ using bitpacking in $O(mn \log \min(m,n,w)/w)$ time.
- Contains a quite nice introduction on global vs semi-global vs local
  alignment.
  #+begin_quote
  Local similarity computation needs a somewhat different arrangement and,
  curiously, it seems not expressible using the distance model, but just the
  score model.
  #+end_quote
- Score model $+1$ for match, $-1$ for substitution and indel.
- Difficulties:
  - Absolute scores must be known to do $\max(0, \cdot)$.
  - Cells can differ by $2$.
- Introduces /witnesses/: Every $Q = O(\log \min(m,n))$ rows the absolute value is stored and
  tracked (using bitpacking). For each column, all absolute values are then
  compared against $0$ and $k$ by taking the $m/Q$ known values and
  incrementally shifting these down using the know vertical differences.
- The resulting algorithm is a beast with $21$ lines of code each containing multiple bit operations.

** Indel distance
This is problem of finding all matches of a pattern in a string with /indel
distance/ at most $k$, where only indels (insertions and deletions) are allowed,
and substitutions are not allowed (or equivalently, they have cost $2$).  Note that in the semi-global alignment case
this is not exactly equivalent to LCS.
*** [cite/t:@lipton85]
:PROPERTIES:
:CUSTOM_ID: lipton85
:END:
[cite/title/b:@lipton85]
#+caption: DP of [cite/t:@lipton85].
#+name: lipton85-dp
[[file:lipton85.png]]
- Introduces recurrence on the DP matrix using mod 4 arithmetic.
- Parallel over antidiagonals
- Note: this has substitution cost $2$, so it's actually using indel distance.
*** [cite/t:@hyyro05-indel-1]
:PROPERTIES:
:CUSTOM_ID: hyyro05-indel-1
:END:
[cite/title/b:@hyyro05-indel-1]

Modifies existing algorithms for indel-distance.
- [cite/t:@myers99] requires modifications, because along diagonals values can now
  increase by $2$ instead of only $0$ and $1$. Runtime is $O(\ceil{m/w}n)$.

- [cite/t:@wu92] and [cite/t:@baeza-yates99] are modified by simply removing one
  case from the DP recurrence. Runtimes are $O(k\ceil{m/w}n)$ and
  $O(\ceil{(k+2)(m-k)/w}n)$ respectively, and are faster than [cite/t:@myers99]
  for small $k$ and small $m$.

- The recurrence for $D$ in the first paragraph of the introduction (and also
  later in the introduction) seems to be missing some $+1$ terms for indels. Or
  maybe I'm missing something?
*** [cite/t:@hyyro05-indel-2]
:PROPERTIES:
:CUSTOM_ID: hyyro05-indel-2
:END:
[cite/title/b:@hyyro05-indel-2]

- Improves the runtime of the indel-distance variant of [cite/t:@myers99] introduced in
  [cite:@hyyro05-indel-1] from $26$ operations to $21$ operations.
- The overall speedup was $24.5\%$, more than the instructions savings of $19\%$.
- Has a much clearer presentation than the previous paper.

* Automata methods
These methods are based on /automata/ (as opposed to a DP matrix). This means
that instead of storing the distance to a state, they for instance indicate
whether the state can be reached with cost $d$ in a bit vector/matrix $R^d$.
Nevertheless, some of these methods seem very closely related to DP based
methods, and this categorisation is not absolute. Rather, I just needed /some/
way to separate out papers a bit.

This category also includes e.g. the Knuth-Morris-Pratt algorithm for linear
time exact string matching.
** Hamming distance
*** [cite/t:@landau-vishkin86]
:PROPERTIES:
:CUSTOM_ID: landau-vishkin86
:END:
[cite/title/b:@landau-vishkin86]

- $O(k(m\log m+n))$ approximate string matching under Hamming distance.
- Constructs some kind of jumplists with mismatches to quickly determine the new
  number of mismatches after shifting the pattern. (But I did not read or
  understand in detail.)

*** [cite/t:@baeza-yates-gonnet92]
:PROPERTIES:
:CUSTOM_ID: baeza-yater-gonnet92
:END:
[cite/title/b:@baeza-yates-gonnet92]
- $O(mn/w)$ string search under Hamming distance; one of the first uses of
  bitpacking.
  - /Shift-add/ algorithm works by counting the number of mismatches along diagonals of the $m\times
    n$ matrix.
- Already submitted in 1989.
- Supposedly builds on theory of finite automata, but seems like a pretty direct
  algorithm to me.
- Extends to matching with character classes, but still only does Hamming distance.
- $O(nm \log k/w)$ when counting up to $k$-mismatches (Hamming distance), by storing each count in
  $\log k$ bits (instead of a single match/mismatch bit).
- Multiple exact string matching in $O(\ceil{m_{sum}/w}n)$ time.

- side note: 3 column layout is terrible -- too much scrolling up and down.
*** TODO [cite/t:@baeza-yates-gonnet94]
:PROPERTIES:
:CUSTOM_ID: baeza-yates-gonnet94
:END:
[cite/title/b:@baeza-yates-gonnet94]


** Edit distance
:PROPERTIES:
:CUSTOM_ID: automata-edit-distance
:END:
*** [cite/t:@ukkonen85-patterns]
:PROPERTIES:
:CUSTOM_ID: ukkonen85-patterns
:END:
[cite/title/b:@ukkonen85-patterns]

When the pattern length $m$ is small, one can build an automaton where states
correspond to columns of the DP matrix, and transitions to parsing a character
of the text.
- This gives $O(n)$ processing time once the automaton has been built.
- There can be up to $K=\min(3^m, 2^t \cdot |\Sigma|^t\cdot m^{t+1})$ different
  columns, meaning $O(m\cdot |\Sigma|\cdot K)$ precomputation can be very slow.
- All states can be found from the initial state by BFS/DFS.
- Not practical.

*** [cite/t:@landau-vishkin85]
:PROPERTIES:
:CUSTOM_ID: landau-vishkin85
:END:
[cite/title/b:@landau-vishkin85]

- Note that [cite/t:@landau-vishkin86] was submitted before this.
- Generalizes this earlier paper to edit distance in $O(m^2 + k^2 n)$ time.
  #+begin_quote
  we first build a table based on analysis of the pattern. Then, we examine the
  text from left to right checking possible occurrences with respect to on
  starting location (in the text) at each iteration.
  #+end_quote
- Like the Hamming distance paper, this seems quite involved and technical.
- TODO: read more carefully at some point (although the details do not sound
  super interesting/relevant).
*** [cite/t:@landau-vishkin88]
:PROPERTIES:
:CUSTOM_ID: landau-vishkin88
:END:
[cite/title/b:@landau-vishkin88]

- Builds on [cite/t:@landau-vishkin85] (earlier conference paper).
- $O(m + k^2 n)$ approximate string search.
*** [cite/t:@wu92]
:PROPERTIES:
:CUSTOM_ID: wu92
:END:
[cite/title/b:@wu92]
- Published in same journal issue as [cite/t:@baeza-yates-gonnet92] and extends
  it to edit distance.
- $O(nkm/w)$ to find all matches of cost at most $k$.
  - Introduces indicator bit-vectors $R^d_j[i]$, such that $R^d$ stores whether
    there is a path of cost $d$ to DP state $(i,j)$.
- Introduces the /partition approach/: If $k\ll m$ errors are allowed, at least
  one part must match when the pattern is partitioned into pieces of length $r=\floor{m/(k+1)}$.
  Thus, one can first do a exact search for multiple patterns, followed by an
  inexact search around matches.

  (TODO: Cite for A*PA)
- Solves multiple exact pattern matching by interleaving the (equal length)
  patterns and shifting left by the number of patterns, instead of by $1$.
- Extends to character classes and wild cards, like [cite/t:@baeza-yates-gonnet92].
- Extends to small integer costs for operations.
- For long patterns and $k>w$, only up to $w$ errors are considered by default
  and more is only computed when a good candidate is found.
- For regular expressions, nondeterministic finite automaton are using.
- ~agrep~: Approximate ~grep~.
*** [cite/t:@bergeron02]
:PROPERTIES:
:CUSTOM_ID: bergeron02
:END:
[cite/title/b:@bergeron02]
- Extends [cite:@baeza-yates-gonnet92] and [cite:@myers99] to arbitrary bounded
  integer weights for edit distance, showing that $O(c \log c)$ bit vector operations are
  sufficient per column transition, for $O(mnc\log(c)/w)$ total runtime.
- Very formal paper -- hard to read and understand what is practically going on.
- Does not give an actual algorithm/implementation, nor experiments.
* Suffix array methods
** Hamming distance
:PROPERTIES:
:CUSTOM_ID: ad-hoc-hamming-distance
:END:
*** [cite/t:@galil86]
:PROPERTIES:
:CUSTOM_ID: galil86
:END:
[cite/title/b:@galil86]
- $O(m+nk)$ for $k$-mismatches string matching
- Uses a suffix array with LCA for $O(1)$ extension. At each position, simply
  extend $k$ times.
*** [cite/t:@grossi89]
:PROPERTIES:
:CUSTOM_ID: grossi89
:END:
[cite/title/b:@grossi89]
Based on permutations.
- First finds all occurrences of permutations of the pattern in the text.
- Extend that to find all permutations of the pattern with at most $k$ mismatches.
- For each match, check if the hamming distance is small.
- Personal remark: it should be possible to extend this to edit distance.
** Edit distance
:PROPERTIES:
:CUSTOM_ID: ad-hoc-edit-distance
:END:
*** [cite/t:@landau-vishkin89]
:PROPERTIES:
:CUSTOM_ID: landau-vishkin89
:END:
[cite/title/b:@landau-vishkin89]
- $O(nk)$ time approximate string matching under edit distance.
- $O(\log m + k)$ serial algorithm using $n$ processors.
- Uses diagonal transition [cite:@ukkonen83;@ukkonen85] together with $O(1)$
  extension using a suffix array. (Similar to [cite/t:@galil86].)
*** [cite/t:@galil90]
:PROPERTIES:
:CUSTOM_ID: galil90
:END:
[cite/title/b:@galil90]
- $O(kn)$ approximate string matching with $k$ /differences/
- Diagonal transition
- Builds $O(m^2)$ lookup table for longest-common-prefix between any two
  suffixes of the pattern.
- Uses /reference triples/ $(u,v,w)$: a maximal substring $u\dots v$ of the text that
  equals $(u-w)\dots (v-w)$ of the pattern.
- Using these, diagonals can be extended efficiently.
- TODO: try to understand this better. It sounds interesting, but needs careful reading.

*** [cite/t:@chang-lawler90]
:PROPERTIES:
:CUSTOM_ID: chang-lawler90
:END:
[cite/title/b:@chang-lawler90]

Based on suffix trees.

- Edit distance in $O(m)$ space and $O(nk/m \cdot \log m)$ /sublinear/ expected time on
  random strings. Worst case $O(nk)$.
- quote:
  #+begin_quote
  Previous algorithms require at least $O(nk)$ time. When $k$ is a s large as a
  fraction of $m$, no substantial progress has been made over $O(nm)$ dynamic programming.
  #+end_quote
- Twice cites /Ukkonen, personal communication/ :(
- Exact matching in sublinear expected time: For positions $s \in \{m, 2m, 3m,
  \dots\}$, find all $j$ such that $T[s+1, \dots, j]$ is a suffix of the
  pattern. For random strings, $j-s > \log(m)$ is not a suffix with high
  probability, so there are only $O((n/m) \log m)$ matches in total, each of
  which is quickly checked.
- In the inexact case, we can for each position $S_j$ in $T$ query the length
  $\ell$ of longest
  prefix of $T[S_j, \dots]$ that is a /substring/ of the pattern, and then jump to
  $S_{j+1} = S_j + \ell +1$. If $S_{j+k+2} - S_j \geq m-k$ that means it may be
  possible to match all $m$ chars here with at most $k$ mistakes, in which case
  an DP-based algorithm can be used for verification.
- To obtain sublinear expected time, the text can be partitioned into $(m-k)/2$
  chunks, so that any match includes at least one whole region. Then, we can
  make $k+1$ /maximum jumps/ from the start of each region. Only if those span
  the entire region, a match is possible there.
*** [cite/t:@chang-lawler94]
:PROPERTIES:
:CUSTOM_ID: chang-lawler94
:END:
[cite/title/b:@chang-lawler94]

This is the journal version of the conference paper [cite/t:@chang-lawler90]. It
seems no additional methods are introduced. (Rather, additional applications are
shown.)

* Other
Some more papers that I downloaded as part of this reading session, but that
turned out somewhat unrelated.

** [cite/t:@hyyro09]
:PROPERTIES:
:CUSTOM_ID: hyyro09
:END:
[cite/title/b:@hyyro09]

Solves the problem of /consecutive suffix alignment/, where $A$ is aligned to
prefixes of growing suffixes $B_{j..n}$ for decreasing $j$. Given an
$O((m+n)n)$ time and $O(m+n)$ space algorithm, which is the first linear space algorithm.

This can be used when the end position of a match in approximate string matching
is known, and the start position needs to be recovered.

The algorithm description looks very technical, and sadly no high-level overview
and/or figures are provided, so I did not read this in detail.
** [cite/t:@hyyro10]
:PROPERTIES:
:CUSTOM_ID: hyyro10
:END:
[cite/title/b:@hyyro10]

This generalizes [cite/t:@hyyro09] to non-unit cost weights.

It has a somewhat intuitive explanation of an earlier algorithm of Kim and Park.
* TODO

Many citations link to /Lecture notes in compute science/ instead of the
original conference. Ideally this is fixed.

** TODO
*** [cite/t:@chang92]
:PROPERTIES:
:CUSTOM_ID: chang92
:END:
[cite/title/b:@chang92]

*** Baeza-Yates 1989 Improved string searching
*** Baeza-Yates 1989 Efficient text searching (PhD thesis)
*** Baeza-Yates 1989 string searching algorithms revisited

*** [cite/t:@baeza-yates-perleberg96]
:PROPERTIES:
:CUSTOM_ID: baeza-yates-perleberg96
:END:
[cite/title/b:@baeza-yates-perleberg96]
*** [cite/t:@baeza-yates96]
:PROPERTIES:
:CUSTOM_ID: baeza-yates96
:END:
[cite/title/b:@baeza-yates96]

*** [cite/t:@baeza-yates99]
:PROPERTIES:
:CUSTOM_ID: baeza-yates99
:END:
*** [cite/t:@navarro-raffinot00]
:PROPERTIES:
:CUSTOM_ID: navarro-raffinot00
:END:
[cite/title/b:@navarro-raffinot00]
*** [cite/t:@fredriksson03]
:PROPERTIES:
:CUSTOM_ID: fredriksson03
:END:
*** [cite/t:@baeza-yates04]
:PROPERTIES:
:CUSTOM_ID: baeza-yates04
:END:
*** [cite/t:@hyyro04]
:PROPERTIES:
:CUSTOM_ID: hyyro04
:END:
[cite/title/b:@hyyro04]

- New bitpacking technique building on ABNDM [TODO] and [cite/t:@myers99] bitpacking.
- Introduces /witnesses/: sparse states of the DP matrix from which others can
  be bounded quickly.
- Improves [cite/t:@myers99] as well.
- $\alpha = k/m$ is called /difference ratio/.
*** [cite/t:@fredriksson04-conference]
:PROPERTIES:
:CUSTOM_ID: fredriksson04-conference
:END:
[cite/title/b:@fredriksson04-conference]
This is the conference paper corresponding to the twice as long journal paper [cite/t:@fredriksson04].
*** [cite/t:@fredriksson04]
:PROPERTIES:
:CUSTOM_ID: fredriksson04
:END:
[cite/title/b:@fredriksson04]
*** [cite/t:@fredriksson05]
:PROPERTIES:
:CUSTOM_ID: fredriksson05
:END:
[cite/title/b:@fredriksson05]
*** [cite/t:@farrar]
:PROPERTIES:
:CUSTOM_ID: farrar
:END:
[cite/title/b:@farrar]
*** [cite/t:@hyyro08]
:PROPERTIES:
:CUSTOM_ID: hyyro08
:END:
[cite/title/b:@hyyro08]
bit parallel NFA
*** [cite/t:@bitpal-cpm]
:PROPERTIES:
:CUSTOM_ID: benson13
:END:
*** [cite/t:@setyorini17]
:PROPERTIES:
:CUSTOM_ID: setyorini17
:END:
*** [cite/t:@segalign]
:PROPERTIES:
:CUSTOM_ID: segalign
:END:
*** [cite/t:@mishin21]
:PROPERTIES:
:CUSTOM_ID: mishin21
:END:
*** [cite/t:@bitpal]
:PROPERTIES:
:CUSTOM_ID: bitpal
:END:


*** [cite/t:@X]
:PROPERTIES:
:CUSTOM_ID: X
:END:
[cite/title/b:@X]

#+print_bibliography:
