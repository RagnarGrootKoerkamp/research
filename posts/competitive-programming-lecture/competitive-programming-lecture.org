#+title: Competitive Programming Lecture
#+HUGO_BASE_DIR: ../..
#+HUGO_TAGS: pairwise-alignment dp astar competitive-programming
#+HUGO_LEVEL_OFFSET: 1
#+HUGO_SECTION: notes
#+OPTIONS: ^:{}
#+hugo_auto_set_lastmod: nil
#+hugo_front_matter_key_replace: author>authors
#+toc: headlines 3
#+date: <2022-09-28>
#+author: Ragnar Groot Koerkamp

* Contest strategies

- Preparation ::
  - Thinking costs energy!
  - Sleep enough; early to bed the 2 nights before.
  - No practising on contest day (and the day before); it just takes energy.
- During the contest ::
  - Eat! At the very least take a break halfway with the entire team and eat some snacks.
  - Make sure to read *all* the problems before the end of the contest. In the
    beginning, split the problems to find the simple ones, but towards the end,
    find a problem you think you can solve (because of the scoreboard or because
    you like it), and work on it as a team.
- Coding ::
  - Ideally, use C++. Otherwise, Python can be used too.
    - For big-integer problems, prefer Python.
  - Use a TCR (e.g. [[https://github.com/TimonKnigge/TCR]]): a 25 page document
    containing algorithms. Ideally, implement all of them yourself so you know
    how they work. Otherwise download one.
  - Make a template, and add it to your TCR. One person should type this in the
    first minutes of the contest and copy it to ~A.cpp~, ~B.cpp~, ... .
  - When you think you solved a problem:
    - Decide /exactly/ how the code will look. Maybe write pseudocode on paper.
    - For hard problems: verify your solution with a teammate.
    - Once the keyboard is free, start typing it out. If needed, ask one
      teammate to look while you code.
    - Typical distribution:
      - 1 person typing
      - 1 person solving a new problem
      - 1 person helping the other 2: spotting typos or working on problems.

* Pairwise Alignment using A*

Some resources you can use:

- Edit distance ([[https://en.wikipedia.org/wiki/Edit_distance][wikipedia]]): Problem introduction
- Dynamic programming: [cite/t:@nw] ([[https://en.wikipedia.org/wiki/Needleman%E2%80%93Wunsch_algorithm][wikipedia]])
- Band-doubling: [cite/t:@ukkonen85] [cite/t:@edlib]
- A*: [cite/t:@astar-hart67] ([[https://en.wikipedia.org/wiki/A*_search_algorithm][wikipedia]])
- A*PA'22 (Seed heuristic, pruning): [cite/t:@astarpa] ([[http://dx.doi.org/10.1101/2022.09.19.508631][paper]])
- [[http:../../posts/pairwise-alignmentl][Overview blogpost]]

* Exercises

1. Implement Needleman-Wunsch's $O(n^2)$ DP algorithm
2. Implement Dijkstra's algorithm
2. Implement Ukkonen's $O(nd)$ band-doubling algorithm
3. Optional: Implement the Seed heuristic
4. Optional: Implement A*PA
5. Very optional: Implement the $O(d^2)$ diagonal-transition/WFA algorithm
   [cite:@ukkonen85;@myers86;@wfa]. I didn't discuss this in detail in the
   class, so you will have to read the papers yourself.

You can test your code on the testdata [[/upload/alignment-testdata.zip][here]]. Each file has two lines containing
a string. The first line starts with ~>~ and the second line with ~<~. All other
characters are from ~ACTG~. There are testcases for length from $10^3$ to $10^6$
and error rate from $1\%$ to $30\%$.
Ideally each algorithm you implement is faster than the one before, and can
handle larger inputs.

#+print_bibliography:
