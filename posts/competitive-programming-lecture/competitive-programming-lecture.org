#+title: Competitive Programming Lecture
#+HUGO_BASE_DIR: ../..
#+HUGO_TAGS: pairwise-alignment diagonal-transition astar gpu
#+HUGO_LEVEL_OFFSET: 1
#+HUGO_SECTION: notes
#+OPTIONS: ^:{}
#+hugo_auto_set_lastmod: nil
#+hugo_front_matter_key_replace: author>authors
# #+bibliography: local-bib.bib
#+cite_export: csl
#+toc: headlines 3
#+date: <2022-09-28>
#+author: Ragnar Groot Koerkamp

** Contest strategies

- Preparation ::
  - Thinking costs energy!
  - Sleep enough; early to bed the 2 nights before.
  - No practising on contest day (and the day before); it just takes energy.
- During the contest ::
  - Eat! At the very least take a break halfway with the entire team and eat some snacks.
  - Make sure to read *all* the problems before the end of the contest. In the
    beginning, split the problems to find the simple ones, but towards the end,
    find a problem you think you can solve (because of the scoreboard or because
    you like it), and work on it as a team.
- Coding ::
  - Ideally, use C++. Otherwise, Python can be used too.
    - For big-integer problems, prefer Python.
  - Use a TCR (e.g. [[https://github.com/TimonKnigge/TCR]]): a 25 page document
    containing algorithms. Ideally, implement all of them yourself so you know
    how they work. Otherwise download one.
  - Make a template, and add it to your TCR. One person should type this in the
    first minutes of the contest and copy it to ~A.cpp~, ~B.cpp~, ... .
  - When you think you solved a problem:
    - Decide /exactly/ how the code will look. Maybe write pseudocode on paper.
    - For hard problems: verify your solution with a teammate.
    - Once the keyboard is free, start typing it out. If needed, ask one
      teammate to look while you code.
    - Typical distribution:
      - 1 person typing
      - 1 person solving a new problem
      - 1 person helping the other 2: spotting typos or working on problems.

** Pairwise Alignment using A*
[[http://dx.doi.org/10.1101/2022.09.19.508631][Paper]]

- Edit distance: Problem introduction
- Dynamic programming: Needleman-Wunsch '69
- Band-doubling: Ukkonen'85/Edlib'16
- A*: Hart & Nilsson '67,
- Seed heuristic'20
- A*PA'22

** Exercises

- Implement Needleman-Wunsch's DP algorithm
- Implement Ukkonens band-doubling algorithm
- Implement the Seed heuristic
- Implement A*PA
