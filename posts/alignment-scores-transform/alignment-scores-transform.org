#+TITLE: Turning match bonus into costs
#+HUGO_BASE_DIR: ../..
#+HUGO_TAGS: pairwise-alignment optimisation match-bonus alignment-scores
#+HUGO_LEVEL_OFFSET: 1
#+OPTIONS: ^:{}
#+hugo_auto_set_lastmod: nil
#+hugo_front_matter_key_replace: author>authors
#+bibliography: local-bib.bib
#+cite_export: csl
#+toc: headlines 3
#+date: <2022-08-11>
#+author: Mykola Akulov
#+author: Ragnar Groot Koerkamp

* Tricks with match bonus or how to fool Dijkstra's limitations

/The reader is assumed to have basic knowledge about pairwise alignment and graph theory./

In this post we will show how to transform traditional alignment score models that include a match
bonus into an equivalent cost model using only non-negative costs. We generalize the relationship
in [cite/t:@wfalm] and show that it applies to both affine and asymmetric cost
models. Unlike their method, our method also does not increase the base penalties by a factor $2$,
leading to a lower cost alignment, and hence a potentially faster runtime of WFA.

** Edit graph

#+NAME: edit-graph
#+CAPTION: The edit graph with match cost $M=0$, mismatch cost $X$, insertion cost $I$, and deletion cost $D$.
[[file:edit-graph.drawio.svg]]


The default global pairwise alignment task can be considered as the task of
finding a shortest path in the edit graph, as shown in [[edit-graph]].

Edges in this graph correspond to the cost you need to 'pay' for an insertion
(cost $I$), deletion (cost $D$), or mismatch (cost $X$) of a letter. If two
letters are the same, you can go through a 'match' edge for free (cost $M=0$).
Since matches are free, it is allowed to greedily match characters whenever
possible without considering the insertion and deletion edges.  This principle
is the basis of the WFA algorithm, which can extend diagonals efficiently
because it does not check other operations.

#+NAME: edit-graph-negative
#+CAPTION: Edit graph with negative match cost $M=-B$.
[[file:edit-graph-negative.drawio.svg]]

In some cases, a negative match cost $M<0$ is used, where using a
match /decreases/ the cost of the alignment, as in [[edit-graph-negative]].
We call the positive number $B:=-M$ the /match bonus/.

** Algorithms

Let’s briefly recall what algorithms can be used to compute the shortest path in an
edit graph. (Note: $n$ and $m$ are sequence lengths here, and $s$ is the
distance between them.)

- *Needleman-Wunsch*: $O(nm)$ approach based on dynamic programming that works for any cost model.
- *Exponential band*: $O(ns)$ by doubling the searched /band/ on each iteration.
  Only for non-negative costs.
- *Dijkstra*: $O(ns)$ when used with a bucket-queue. Only works for non-negative costs.
- *WFA*: A more efficient variant of Dijkstra, $O(ns)$ worst case and
  $O(s^2)$ expected case. Only works for non-negative edges.

As you can see, only the Needleman-Wunsch DP can handle the negative cost edges
created by introducing a match bonus. All other algorithms break.

** Potentials

A classic variant of Dijkstra's algorithm that can handle negative-cost edges is
[[https://en.wikipedia.org/wiki/Johnson%27s_algorithm][Johnson's algorithm]] [cite:@johnson]. The idea is to give a /potential/ $\phi(u)$ to each vertex
$u$, and change the cost of an edge from $u$ to $v$ from $E(u, v)$ to[fn::Note
that most sources use $\phi$ with an opposite sign. I find our choice to be
more natural though: think of the potential as potential energy (height). When
going up, you pay extra for this, and can use this energy/cost reduction later
when going down.]
$$E'(u,v) = E(u,v) - \phi(u) + \phi(v).$$
Regardless of how the potential function $\phi$ is chosen, the length of each
path from any vertex $s$ to any vertex $t$ will change by exactly
$\phi(t) - \phi(s)$. This means that the transformation preserves shortest paths.

It turns out $\phi$ can always be chosen in such a way that all new edge costs
$E'$ are non-negative when the graph does not contain negative cycles. In
particular, in Jonson's algorithm $-\phi(u) = d(s, u)$ is the length of the
shortest path from a fixed vertex $s$ to $u$. This somewhat defeats our purpose
though: computing shortest paths is what we are trying to do in the first place.

In our case, the edit graph is weighted, directed, without cycles, and "all roads lead to Rome" in
it – any way you can take in the edit graph will end in the target point to
which we are finding a shortest path.  To get to this terminus we need to cross
the graph both vertically and horizontally as we go from the upper left
corner to the bottom right one. All paths take the same number of steps down,
and the same number of steps to the right, where an insertion is one step down,
a deletion is one step right, and a match and mismatch are one step down and one step right.

#+NAME: transformed
#+CAPTION: Edit graph with /transformed/ non-negative edges with $\Delta_D + \Delta_I = B$, so that $M'=0$.
[[file:edit-graph-transformed.drawio.svg]]

We can increase the cost of each horizontal step by $\Delta_D$ and the cost of
each vertical step by $\Delta_I$ ([[transformed]]), so that (mis)matches become
$\Delta_I+\Delta_D$ more expensive. This way, the total cost of the alignment
goes up by $n\cdot \Delta_D + m \cdot \Delta_I$.

Now, a simple way to get rid of negative match edges is to simply require that
$\Delta_I + \Delta D \geq B$.

#+NAME: grid
#+CAPTION: Coordinate grid for vertexes
[[file:edit-graph-coords.drawio.svg]]

Let $u=\langle i, j\rangle$ denote the vertex in column $i$ and row $j$ ([[grid]]).
Then, the above is equivalent to a potential $\phi$ given by
$$\phi(u) = \phi\langle i, j\rangle := i\cdot \Delta_D + j\cdot \Delta_I.$$

Indeed, the cost of a deletion goes up by $\Delta_D$
$$D' := D - \phi\langle i, j\rangle + \phi\langle i+1, j\rangle
= D + \Delta_D,$$
and the cost of an insertion edge goes up by $\Delta_I$:
$$I' := I - \phi\langle i, j\rangle + \phi\langle i, j+1\rangle
= I + \Delta_I.$$
Similarly, for matches and mismatches, the cost goes up by $\Delta_I + \Delta_D$,
\begin{align}
    X' &:= X + \Delta_D + \Delta_I,\\
    M' &:= M + \Delta_D + \Delta_I.
\end{align}

We would like all edges to have a non-negative cost, so our choice of $\Delta_D$
and $\Delta_I$ must satisfy the following constraints:
\begin{align}
    \Delta_D &\geq -D,\\
    \Delta_I &\geq -I,\\
    \Delta_D + \Delta_I &\geq -M = B \geq 0.
\end{align}

** Correcting the score

Since $\phi\langle 0,0\rangle = 0$, and $\phi\langle n, m\rangle = n \cdot
\Delta_D + m \cdot \Delta_I$, the total cost of each path goes up by
\begin{equation}
\phi\langle n,m\rangle - \phi\langle 0,0\rangle = n\cdot \Delta_D + m\cdot \Delta_I.
\end{equation}

Thus, at the end of the alignment, we must subtract this score to obtain the
aligment score for the original cost model.


** Multiple variants
The above equations give us some flexibility in choosing $\Delta_I$ and
$\Delta_D$. Generally, lower costs lead to faster algorithms, so we will
restrict ourselves to the case where $M' = M + \Delta_D + \Delta_I = 0$, i.e. where exact matches are free.

There are a few natural choices that we cover now.

- Symmetric cost increase ::
  $\Delta_D = \lfloor B/2 \rfloor$ and $\Delta_I = \lceil B/2 \rceil$.

  $D' = D + \lfloor B/2\rfloor$, $I' = I + \lceil B/2\rceil$, $M' = 0$.
- Insertion cost increase :: $\Delta_D = 0$ and $\Delta_I = B$.

  $D' = D$, $I' = I + B$, $M' = 0$.
- Deletion cost increase :: $\Delta_D = B$ and $\Delta_I = 0$.

  $D' = D+B$, $I' = I$, $M' = 0$.

On the extreme end, we could even make insertions or deletions free as well,
/transferring/ all cost into the other direction. Note that we can even do this
when matches are already free ($M = -B=0$).
- Free insertions :: $\Delta_D = B+I$ and $\Delta_I = -I$.

  $D' = D+B+I$, $I' = 0$, $M' = 0$.
- Free deletions :: $\Delta_D = -D$ and $\Delta_I = B+D$.

  $D' = 0$, $I' = I+B+D$, $M' = 0$.


** WFA
For WFA this cost transformation is a life-saver because with $M'=0$ it allows
for "greedy matching" again – the core of the algorithm that enables fast
extending diagonals.  This is important, because one of the main WFA data
structures is a wavefront, which covers all states that can be reached with
specific cost. If the cost could go down, it could disrupt previous wavefronts,
which would break the logic of the algorithm. The drawback of the cost
transformation is that it increases the cost of the optimal alignment, and hence
increases the number of wavefronts, leading to a slower WFA execution.

Thus, we expect that the lower the cost of the target state, the faster the WFA
algorithm runs.

** Affine costs

The potentials defined above naturally extend to affine costs. Each state in an affine layer
naturally corresponds to a state $\langle i,j\rangle$ in the main layer, and can
use the corresponding potential.

** Evaluations

Now let's see how WFA performs when using different transformation variants.

We will use the following cost model:
- $I = 1$ - insertion cost
- $D = 1$ - deletion cost
- $X = 1$ - substitution cost
- $B = 2$ - match bonus

*** Unequal string length

Firstly, let's make an experiment on sequences where the first sequence is
longer than the second, i.e. $n > m$.

Given the match bonus, we can take different values for $\Delta_I$ and
$\Delta_D$. According to our hypothesis of keeping the cost increase minimal, the optimal option should be $\Delta_I =
2$ and $\Delta_D = 0$, since $\Delta_I$ is multiplied by $m$. Let's check that![fn::The author's laptop was made in
times of the Second Punic War, so he decided not to take very long sequences to
save his working station.][fn::Also, the code is not optimized in the first place.]

#+name: t1
#+caption: Timing and number of expanded states of WFA when $n > m$.
#+attr_html: :class small
| $n$ | $m$ | $\Delta_D$ | $\Delta_I$ | Cost | Time (ms) | #expanded |
| 260 | 199 | $2$        | $0$        | -275 |        26 |     92628 |
| 260 | 199 | $1$        | $1$        | -275 |        11 |     48895 |
| 260 | 199 | $0$        | $2$        | -275 |         6 |     42610 |

I think the numbers are eloquent enough, so let's look at the pixels. As you can
see the second sequence has a suffix of the first one deleted.

#+NAME: t2
#+CAPTION: Computed states corresponding to the table rows above.
| [[file:unequal_delta_i.png]] | [[file:unequal_equal.png]] | [[file:unequal_delta_d.png]] |

We can clearly see that increasing $\Delta_I$ (the vertical cost) instead of
$\Delta_D$ yields less downward expansion, and fewer visited states in total.

*** Equal string lengths

Let's see how things work out in case of equal length strings, where the total
score will be the same independent of how we choose $\Delta_D$ and $\Delta_I$.

#+name: t3
#+caption: Timing and number of expanded states of WFA when $n = m$.
#+attr_html: :class small
|   N |   M | $\Delta_D$ | $\Delta_I$ | Cost | Time (ms) | #expanded  |
| 200 | 200 | $2$        | $0$        | -323 |         4 |      45920 |
| 200 | 200 | $1$        | $1$        | -323 |         3 |      34466 |
| 200 | 200 | $0$        | $2$        | -323 |         4 |      46020 |

In this case, we can see in the experiments that it is preferred to split the
match bonus equally between $\Delta_D$ and $\Delta_I$.  Pictures for this case
are so:

#+NAME: t4
#+CAPTION: Computed states corresponding to the table rows above.
| [[file:equal_delta_i.png]] | [[file:equal_equal.png]] | [[file:equal_delta_d.png]] |

The middle picture clearly visits fewer states, and seems to benefit from being
pushed towards the end, without needless exploration to the sides.

* Conclusion

We have shown that alignment score/cost models that include a match bonus can be
transformed into an equivalent cost model using only non-negative costs when
doing global alignment. This transformation even works for affine and asymmetric
costs. It avoids doubling costs (to preserve integral values) by distributing an
odd match bonus unevenly over the horizontal and vertical steps in the edit graph.


* References

#+print_bibliography:
