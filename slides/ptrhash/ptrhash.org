#+title: PtrHash
#+subtitle: Minimal Perfect Hashing at RAM Throughput
#+author: Ragnar {Groot Koerkamp}
#+hugo_section: slides
#+filetags: @slides mphf
#+OPTIONS: ^:{} num: num:0 toc:nil
#+hugo_front_matter_key_replace: author>authors
# #+toc: depth 2
#+reveal_theme: white
#+reveal_extra_css: /css/slide.min.css
#+reveal_init_options: width:1920, height:1080, margin: 0.04, minScale:0.2, maxScale:2.5, disableLayout:false, transition:'none', slideNumber:'c/t', controls:false, hash:true, center:false, navigationMode:'linear', hideCursorTime:2000
#+reveal_reveal_js_version: 4
#+export_file_name: ../../static/slides/ptrhash/index.html
#+hugo_paired_shortcodes: %notice
#+date: <2025-07-20 Sun>
# Export using C-c C-e R R
# Enable auto-export using :toggle-org-reveal-export-on-save
# Disable hugo export using :org-hugo-auto-export-mode

#+begin_export html
<script src="/livereload.js?mindelay=10&amp;v=2&amp;port=1313&amp;path=livereload" data-no-instant defer></script>

#+end_export

#+REVEAL_TITLE_SLIDE: <h1 class="title" style="text-transform:none;line-height:2.3rem;padding-top:1rem;padding-bottom:1rem;">%t<br/><span style="font-size:1.3rem;color: #444444">%s</span></h1>
#+REVEAL_TITLE_SLIDE: <h2 class="author" style="margin:0;font-size:1rem;line-height:initial;margin-top:1.5rem;">%a</h2>
#+REVEAL_TITLE_SLIDE: <h2 class="author" style="margin:0;font-size:0.7rem;font-family:monospace;line-height:initial;color:rgb(0, 133, 255);text-transform:none;">@curiouscoding.nl</h2>
#+REVEAL_TITLE_SLIDE: <h2 class="date" style="font-size:0.7rem;font-weight:normal;color:grey;margin-top:0.5rem">SEA 2025, July 24, Venice</h2>
# #+REVEAL_TITLE_SLIDE: <img src="/ox-hugo/bmilab.svg" style="position:absolute;bottom:6.5%%;left:2%%;width:30%%"></img>
#+REVEAL_TITLE_SLIDE: <img src="/ox-hugo/ethz.svg" style="position:absolute;bottom:0%%;left:0%%;width:20%%"></img>
#+REVEAL_TITLE_SLIDE: <a href="https://curiouscoding.nl/papers/ptrhash.pdf" style="position:absolute;bottom:9.8%%;right:10%%;width:30%%;color:grey;font-size:smaller">curiouscoding.nl/papers/ptrhash.pdf</a>
#+REVEAL_TITLE_SLIDE: <a href="https://curiouscoding.nl/slides/ptrhash" style="position:absolute;bottom:3.8%%;right:10%%;width:30%%;color:grey;font-size:smaller">curiouscoding.nl/slides/ptrhash</a>

* Minimal Perfect Hash Functions
:PROPERTIES:
:CUSTOM_ID: hashing
:END:


** A set of $n$ keys
:PROPERTIES:
:CUSTOM_ID: h-keys
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/h-keys.svg
[[file:figs/h-keys.svg]]

** A hash function
:PROPERTIES:
:CUSTOM_ID: h-hash
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/h-hash.svg
[[file:figs/h-hash.svg]]

** A hash function: collisions!
:PROPERTIES:
:CUSTOM_ID: h-collision
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/h-collision.svg
[[file:figs/h-collision.svg]]

** A hash function: injective / /perfect/
:PROPERTIES:
:CUSTOM_ID: h-injection
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/h-injection.svg
[[file:figs/h-injection.svg]]

** A hash function: bijective / /minimal & perfect/
:PROPERTIES:
:CUSTOM_ID: h-bijection
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/h-bijection.svg
[[file:figs/h-bijection.svg]]

* Problem statement
:PROPERTIES:
:CUSTOM_ID: problem-statement
:END:

Given a set of $n$ keys $K\subseteq \mathbb K$, build a function $h$ satisfying
- $h(K) = \{0, \dots, n-1\}$:  $h$ is /minimal & perfect/.

-----

#+attr_reveal: :frag t :frag_idx 2
Why? Array of $n$ values as space-efficient value store.

#+attr_reveal: :frag t :frag_idx 2
Solutions take $\log_2(e) {=} 1.443$ to $3$ bits/key.

#+attr_reveal: :frag t :frag_idx 2
Goals of PtrHash:
#+attr_reveal: :frag t :frag_idx 2
- at most 3 bits/key (you probably store â‰¥16 bit values anyway),
- fast to evaluate,
- fast to construct.

* Previous & parallel work
:PROPERTIES:
:CUSTOM_ID: prev-work
:END:
- FCH: [cite/t:@fch]
- CHD: [cite/t:@chd]

-----

- PTHash: [cite/t:@pthash]
- PHOBIC: [cite/t:@phobic]

-----

- PHast: [cite/t:@phast]
- Consensus: [cite/t:@consensus]

- Survey: [cite/t:@mphf-survey]

$$
\newcommand{\lo}{\mathsf{lo}}
\newcommand{\hi}{\mathsf{hi}}
$$


** Naive: try seeded hashes
:PROPERTIES:
:CUSTOM_ID: n-1
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/n-1.svg
[[file:figs/n-1.svg]]

** Naive: try seeded hashes
:PROPERTIES:
:CUSTOM_ID: n-2
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/n-2.svg
[[file:figs/n-2.svg]]

** Naive: try seeded hashes
:PROPERTIES:
:CUSTOM_ID: n-3
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/n-3.svg
[[file:figs/n-3.svg]]
** Naive: $n^n / n!\approx e^n$ tries, $n\cdot\log_2 e$ bits
:PROPERTIES:
:CUSTOM_ID: n-4
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/n-4.svg
[[file:figs/n-4.svg]]

* Build $h$ incrementally using buckets
:PROPERTIES:
:CUSTOM_ID: buckets-before
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/buckets-before.svg
[[file:figs/buckets-before.svg]]

** Build $h$ incrementally
:PROPERTIES:
:CUSTOM_ID: incremental-1
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/incremental-1.svg
[[file:figs/incremental-1.svg]]
** Build $h$ incrementally
:PROPERTIES:
:CUSTOM_ID: incremental-2
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/incremental-2.svg
[[file:figs/incremental-2.svg]]
** Build $h$ incrementally
:PROPERTIES:
:CUSTOM_ID: incremental-3
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/incremental-3.svg
[[file:figs/incremental-3.svg]]
** Build $h$ incrementally
:PROPERTIES:
:CUSTOM_ID: incremental-4
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/incremental-4.svg
[[file:figs/incremental-4.svg]]
** Build $h$ incrementally
:PROPERTIES:
:CUSTOM_ID: incremental-5
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/incremental-5.svg
[[file:figs/incremental-5.svg]]
** Build $h$ incrementally
:PROPERTIES:
:CUSTOM_ID: incremental-6
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/incremental-6.svg
[[file:figs/incremental-6.svg]]
** Build $h$ incrementally
:PROPERTIES:
:CUSTOM_ID: incremental-7
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/incremental-7.svg
[[file:figs/incremental-7.svg]]
** Build $h$ incrementally
:PROPERTIES:
:CUSTOM_ID: incremental-8
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/incremental-8.svg
[[file:figs/incremental-8.svg]]
** Build $h$ incrementally
:PROPERTIES:
:CUSTOM_ID: incremental-9
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/incremental-9.svg
[[file:figs/incremental-9.svg]]
** Build $h$ incrementally
:PROPERTIES:
:CUSTOM_ID: incremental-10
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/incremental-10.svg
[[file:figs/incremental-10.svg]]
** Build $h$ incrementally
:PROPERTIES:
:CUSTOM_ID: incremental-11
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/incremental-11.svg
[[file:figs/incremental-11.svg]]
** Build $h$ incrementally
:PROPERTIES:
:CUSTOM_ID: incremental-12
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/incremental-12.svg
[[file:figs/incremental-12.svg]]

* Better: assign buckets from large to small
:PROPERTIES:
:CUSTOM_ID: bucket-sort
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/incremental-12.svg
[[file:figs/incremental-12.svg]]

* Skew bucket sizes
:PROPERTIES:
:CUSTOM_ID: bucket-sizes
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/bucket-sizes.svg
[[file:figs/bucket-sizes.svg]]


* Query: 1. Hash key
:PROPERTIES:
:CUSTOM_ID: query-1
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/query-1.svg
[[file:figs/query-1.svg]]

* Query: 2. Lookup bucket
:PROPERTIES:
:CUSTOM_ID: query-2
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/query-2.svg
[[file:figs/query-2.svg]]

* Query: 3. Compute slot
:PROPERTIES:
:CUSTOM_ID: query-3
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/query-3.svg
[[file:figs/query-3.svg]]


* Remapping: avoiding the hard part
:PROPERTIES:
:CUSTOM_ID: remap-0
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/incremental-12.svg
[[file:figs/incremental-12.svg]]


** Remapping: add $1\%$ extra /slots/
:PROPERTIES:
:CUSTOM_ID: remap-1
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/remap-1.svg
[[file:figs/remap-1.svg]]

** Remapping: add $1\%$ extra /slots/
:PROPERTIES:
:CUSTOM_ID: remap-2
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/remap-2.svg
[[file:figs/remap-2.svg]]

** Remapping: map extra slots back
:PROPERTIES:
:CUSTOM_ID: remap-3
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/remap-3.svg
[[file:figs/remap-3.svg]]


** Remapping: map extra slots back
:PROPERTIES:
:CUSTOM_ID: remap-4
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/remap-4.svg
[[file:figs/remap-4.svg]]

* PTHash
:PROPERTIES:
:CUSTOM_ID: dictionary
:END:

- Iterate seed values (/pilots/) until a hit is found.
- Dictionary compression to handle large values.

#+attr_html: :class large :style height:400px;top:700px :src /ox-hugo/dictionary.svg
[[file:figs/dictionary.svg]]


* PtrHash
:PROPERTIES:
:CUSTOM_ID: cuckoo
:END:
#+attr_html: :style color:grey
- Iterate seed values (/pilots/) until a hit is found.
- Dictionary compression to handle large values.

-----

- "Inlined" 8-bit pilots for fast lookup
- Handle impossible buckets by evicting others
  - When none of the $2^8=256$ seeds are collision free, choose the one with
    minimal number of collisions, and break ties towards evicting small buckets.
  - /Eviction/: "unassign" a seed, and put the bucket back in the queue.
  - Distributes the entropy from the hard buckets over all seeds.

<no animation here :(>

* New: $\varepsilon$ cost sharding
:PROPERTIES:
:CUSTOM_ID: sharding
:END:

TODO: FIGURE

* Results
:PROPERTIES:
:CUSTOM_ID: results
:END:

** Construction time vs. size
:PROPERTIES:
:CUSTOM_ID: time-vs-size
:END:

#+attr_html: :class large :style height:1000px;top:55% :src /ox-hugo/size.svg
[[file:plots/size.svg]]

** Comparison
:PROPERTIES:
:CUSTOM_ID: comparison
:END:
- 300M variable length string keys
\\

- <3 bits/key
- fastest queries by 2x to 4x
- also fast construction

#+attr_html: :class large :style height:100%;left:73%;top:48% :src /ox-hugo/table2.png
[[file:table2.png]]

* Queries: looping, batching, streaming
:PROPERTIES:
:CUSTOM_ID: queries
:END:

** A simple loop
:PROPERTIES:
:CUSTOM_ID: simple-loop
:END:

- Setup: PtrHash on $10^9$ integer keys; 300 MB.
- Fact: Most queries need uncached data from RAM.
- Fact: Reading RAM takes 80 ns
- Question: how long does this take? (>90, â‰ˆ80, 40-60, <30)

#+begin_src rust
for k in keys {
    h.query(k);
}
#+end_src

#+attr_reveal: :frag t :frag_idx 2
- Answer: 12 ns!
  - The CPU works on 7 iterations in parallel!
- To measure latency (TODO):

#+attr_reveal: :frag t :frag_idx 2
#+begin_src rust
let mut seed = 0;
for k in keys {
    seed ^= h.query(seed ^ k);
}
#+end_src

** Batching & Streaming
:PROPERTIES:
:CUSTOM_ID: batching
:END:

Batching:
#+begin_src rust
for batch in keys.array_chunks::<32>() {
    for k in batch {
        h.prefetch_seed(k);
    }
    for k in batch {
        h.query(k);
    }
}
#+end_src

Streaming:
#+begin_src rust
for i in 0..n {
    h.prefetch_seed(keys[i+32]);
    h.query(keys[i]);
}
#+end_src

** Batching with Prefetching
:PROPERTIES:
:CUSTOM_ID: batching-1
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/batching-1.svg
[[file:figs/batching-1.svg]]
** Batching with Prefetching
:PROPERTIES:
:CUSTOM_ID: batching-2
:END:
#+attr_html: :class large :style height:800px :src /ox-hugo/batching-2.svg
[[file:figs/batching-2.svg]]


** Batching & Prefetching
:PROPERTIES:
:CUSTOM_ID: results-prefetching
:END:
#+attr_html: :class large :style height:100% :src /ox-hugo/query_batching.svg
[[file:query_batching.svg]]

** Multithreading
:PROPERTIES:
:CUSTOM_ID: results-multithreading
:END:
#+attr_html: :class large :style height:100% :src /ox-hugo/query_throughput.svg
[[file:query_throughput.svg]]

* Conclusions
:PROPERTIES:
:CUSTOM_ID: conclusion
:END:
- Simple $\implies$ fast
- *Partition* data into cache-sized chunks
- *Streaming* & *prefetching* for max throughput

* Brought to you by
:PROPERTIES:
:CUSTOM_ID: the-end
:END:

#+attr_html: :class large :style height:1000px;top:55% :src /ox-hugo/ptr.jpg
[[file:ptr.jpg]]

* Bonus slides
:PROPERTIES:
:CUSTOM_ID: bonus
:END:

** Simple operations
:PROPERTIES:
:CUSTOM_ID: simple-ops
:END:
- Hashing via
   $$h(x) = \lo(C\cdot x) = (C\cdot x)\mod 2^{64}.$$
- Quadratic bucket function
  $$\gamma(x) = \hi(x\cdot x) = \lfloor x^2/2^{64}\rfloor.$$
- Use fastmod for $\mod n$

** Overview
:PROPERTIES:
:CUSTOM_ID: overview
:END:

#+attr_html: :class large :style height:800px :src /ox-hugo/overview.drawio.svg
[[file:figs/overview.drawio.svg]]

** Parameters
:PROPERTIES:
:CUSTOM_ID: parameters
:END:

#+attr_html: :class large :style height:1000px;top:55% :src /ox-hugo/table1.png
[[file:table1.png]]
