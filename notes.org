#+author: Ragnar Groot Koerkamp
#+HUGO_BASE_DIR: .
#+HUGO_SECTION: posts
#+HUGO_AUTO_SET_LASTMOD: t
#+FILETAGS: @notes

* Notes
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:END:
These are short unprocessed thoughts and remarks. Some may eventually turn into
a post.
* Hello, World!
CLOSED: [2021-10-13]
:PROPERTIES:
:EXPORT_FILE_NAME: hello-world
:END:
#+BEGIN_SRC python
print("Hello, World!")
#+END_SRC
#+BEGIN_SRC cpp
std::cout << "Hello, World!" << std::endl;
#+END_SRC

* Hugo and ox-hugo :hugo:org:
CLOSED: [2021-10-14]
:PROPERTIES:
:EXPORT_FILE_NAME: hugo
:END:
Here's the customary /how I made this site using X/ post.

This site is built using [[https://gohugo.io][Hugo]] and [[https://ox-hugo.scripter.co/][~ox-hugo~]].

The source is written in [[https://orgmode.org/][Org mode]], which is converted to markdown by ~ox-hugo~.
To get started yourself, check out the [[https://github.com/RagnarGrootKoerkamp/research/tree/c46e8c7840d70b86746ebe1d76384893638d8bbc][initial commit]] of the source repository
and build from there.

Some notes:
- I'm using the ~Hugo-coder~ theme.
- Since the conversion from Org to markdown is done using an Emacs plugin, the
  ~emacs~ folder contains a simple ~init.el~ to import ~ox-hugo~ and a function
  to export all ~*.org~ files in the repository apart from those inside the
  ~emacs~ folder itself.
- The ~makefile~ contains the ~build-content~ rule to call the conversion, and
  ~build-site~ to invoke Hugo. Just running ~make~ will do both of these and
  serve the site locally.

* TODO list :todo:
CLOSED: [2021-10-20 Wed 14:07]
:PROPERTIES:
:EXPORT_FILE_NAME: todo
:END:

- Fix latex rendering (katex vs mathjax; markdown engine configuration)

* DONE 1st law of Procrastination :observation:quote:
CLOSED: [2021-10-22 Fri 11:46]
:PROPERTIES:
:EXPORT_FILE_NAME: procrastination
:END:
Important deadlines require important procrastination.

* DONE Data should be reviewed :observation:
CLOSED: [2021-10-22 Fri 11:41]
:PROPERTIES:
:EXPORT_FILE_NAME: data-should-be-reviewed
:END:
Experiments and their analysis should be reproducible, and all data/figures in a
paper should be reviewable. Pipelines (e.g. ~snakemake~ files) to generated them
should be attached to the paper.
* DONE RFTE :quote:
CLOSED: [2021-10-22 Fri 15:16]
:PROPERTIES:
:EXPORT_FILE_NAME: rfte
:END:
Read The F*ing Error

- When you complain about an error without reading it first.
- When you assume you understand the problem halfway through reading the error,
  and only after more debugging you realize you failed to read properly.
* DONE A* and heuristics avoiding expanded states :astar:
CLOSED: [2021-12-11 Sat 10:24]
:PROPERTIES:
:EXPORT_FILE_NAME: astar-heuristic
:END:
Let the start vertex be $s$ and the end be $t$. $d(s,t)$ is the distance we are
looking for.

An A* heuristic has to satisfy $h(u) \leq d(u, t)$ to be /admissible/: the
estimated distance to the end should never be larger than the actual distance to
guarantee that the algorithm finds a shortest path.

We can do better: it is sufficient that $h(u) \leq d'(u,t)$, where $d'(u,t)$ is the
length of the shortest path from $u$ to the end that /does not use any already
expanded state/. Note that this restriction is looser than the original one,
since $d'(u,t)\geq d(u,t)$ trivially holds.

- Proof ::
    Let $x$ be an already expanded
    state, and let $u$ be an unexpanded state where we are evaluating $h$.

    The shortest path through $x$ will have length $l = d(s, x) + d(x, t)$, where
    $d(s,x)$ is already known since $x$ was expanded.

    If the global shortest path goes through $x$, its length is $l$, and we
    cannot do better by going via $u$: replacing $d(s,x)$ by $d(s,u) + d(u,x)$
    can not decrease the distance (by the triangle
    inequality, or by definition of $x$ already being expanded).

    Thus, in an unexpanded state $u$, taking a path through an already expanded
    state will never lead to a global minimum. (It may give the shortest distance
    from $s$ to $t$ via $u$, but that is not what we are looking for.)

    Conclusion: In order for a path through $u$ to be a candidate for the global
    minimum, it has to avoid all already expanded states. The heuristic $h$ we use
    can reflect this, and is allowed to satisfy $h(u) \leq d'(u,t)$.
